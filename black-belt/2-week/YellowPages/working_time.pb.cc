// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: working_time.proto

#include "working_time.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace YellowPages {
constexpr WorkingTimeInterval::WorkingTimeInterval(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : day_(0)

  , minutes_from_(0)
  , minutes_to_(0){}
struct WorkingTimeIntervalDefaultTypeInternal {
  constexpr WorkingTimeIntervalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkingTimeIntervalDefaultTypeInternal() {}
  union {
    WorkingTimeInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkingTimeIntervalDefaultTypeInternal _WorkingTimeInterval_default_instance_;
constexpr WorkingTime::WorkingTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : intervals_()
  , formatted_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkingTimeDefaultTypeInternal {
  constexpr WorkingTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkingTimeDefaultTypeInternal() {}
  union {
    WorkingTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkingTimeDefaultTypeInternal _WorkingTime_default_instance_;
}  // namespace YellowPages
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_working_5ftime_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_working_5ftime_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_working_5ftime_2eproto = nullptr;

const uint32_t TableStruct_working_5ftime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTimeInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTimeInterval, day_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTimeInterval, minutes_from_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTimeInterval, minutes_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTime, formatted_),
  PROTOBUF_FIELD_OFFSET(::YellowPages::WorkingTime, intervals_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::YellowPages::WorkingTimeInterval)},
  { 9, -1, -1, sizeof(::YellowPages::WorkingTime)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YellowPages::_WorkingTimeInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::YellowPages::_WorkingTime_default_instance_),
};

const char descriptor_table_protodef_working_5ftime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022working_time.proto\022\013YellowPages\"\343\001\n\023Wo"
  "rkingTimeInterval\0221\n\003day\030\001 \001(\0162$.YellowP"
  "ages.WorkingTimeInterval.Day\022\024\n\014minutes_"
  "from\030\002 \001(\005\022\022\n\nminutes_to\030\003 \001(\005\"o\n\003Day\022\014\n"
  "\010EVERYDAY\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\t"
  "WEDNESDAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n"
  "\010SATURDAY\020\006\022\n\n\006SUNDAY\020\007\"U\n\013WorkingTime\022\021"
  "\n\tformatted\030\001 \001(\t\0223\n\tintervals\030\002 \003(\0132 .Y"
  "ellowPages.WorkingTimeIntervalb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_working_5ftime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_working_5ftime_2eproto = {
  false, false, 358, descriptor_table_protodef_working_5ftime_2eproto, "working_time.proto", 
  &descriptor_table_working_5ftime_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_working_5ftime_2eproto::offsets,
  file_level_metadata_working_5ftime_2eproto, file_level_enum_descriptors_working_5ftime_2eproto, file_level_service_descriptors_working_5ftime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_working_5ftime_2eproto_getter() {
  return &descriptor_table_working_5ftime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_working_5ftime_2eproto(&descriptor_table_working_5ftime_2eproto);
namespace YellowPages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkingTimeInterval_Day_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_working_5ftime_2eproto);
  return file_level_enum_descriptors_working_5ftime_2eproto[0];
}
bool WorkingTimeInterval_Day_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WorkingTimeInterval_Day WorkingTimeInterval::EVERYDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::MONDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::TUESDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::WEDNESDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::THURSDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::FRIDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::SATURDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::SUNDAY;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::Day_MIN;
constexpr WorkingTimeInterval_Day WorkingTimeInterval::Day_MAX;
constexpr int WorkingTimeInterval::Day_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WorkingTimeInterval::_Internal {
 public:
};

WorkingTimeInterval::WorkingTimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:YellowPages.WorkingTimeInterval)
}
WorkingTimeInterval::WorkingTimeInterval(const WorkingTimeInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&day_, &from.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_to_) -
    reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
  // @@protoc_insertion_point(copy_constructor:YellowPages.WorkingTimeInterval)
}

inline void WorkingTimeInterval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&day_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_to_) -
    reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
}

WorkingTimeInterval::~WorkingTimeInterval() {
  // @@protoc_insertion_point(destructor:YellowPages.WorkingTimeInterval)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkingTimeInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorkingTimeInterval::ArenaDtor(void* object) {
  WorkingTimeInterval* _this = reinterpret_cast< WorkingTimeInterval* >(object);
  (void)_this;
}
void WorkingTimeInterval::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkingTimeInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkingTimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:YellowPages.WorkingTimeInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minutes_to_) -
      reinterpret_cast<char*>(&day_)) + sizeof(minutes_to_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkingTimeInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .YellowPages.WorkingTimeInterval.Day day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_day(static_cast<::YellowPages::WorkingTimeInterval_Day>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 minutes_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minutes_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minutes_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          minutes_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkingTimeInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YellowPages.WorkingTimeInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .YellowPages.WorkingTimeInterval.Day day = 1;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_day(), target);
  }

  // int32 minutes_from = 2;
  if (this->_internal_minutes_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minutes_from(), target);
  }

  // int32 minutes_to = 3;
  if (this->_internal_minutes_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_minutes_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YellowPages.WorkingTimeInterval)
  return target;
}

size_t WorkingTimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YellowPages.WorkingTimeInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .YellowPages.WorkingTimeInterval.Day day = 1;
  if (this->_internal_day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_day());
  }

  // int32 minutes_from = 2;
  if (this->_internal_minutes_from() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minutes_from());
  }

  // int32 minutes_to = 3;
  if (this->_internal_minutes_to() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minutes_to());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkingTimeInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkingTimeInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkingTimeInterval::GetClassData() const { return &_class_data_; }

void WorkingTimeInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkingTimeInterval *>(to)->MergeFrom(
      static_cast<const WorkingTimeInterval &>(from));
}


void WorkingTimeInterval::MergeFrom(const WorkingTimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YellowPages.WorkingTimeInterval)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_minutes_from() != 0) {
    _internal_set_minutes_from(from._internal_minutes_from());
  }
  if (from._internal_minutes_to() != 0) {
    _internal_set_minutes_to(from._internal_minutes_to());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkingTimeInterval::CopyFrom(const WorkingTimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YellowPages.WorkingTimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingTimeInterval::IsInitialized() const {
  return true;
}

void WorkingTimeInterval::InternalSwap(WorkingTimeInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkingTimeInterval, minutes_to_)
      + sizeof(WorkingTimeInterval::minutes_to_)
      - PROTOBUF_FIELD_OFFSET(WorkingTimeInterval, day_)>(
          reinterpret_cast<char*>(&day_),
          reinterpret_cast<char*>(&other->day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkingTimeInterval::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_working_5ftime_2eproto_getter, &descriptor_table_working_5ftime_2eproto_once,
      file_level_metadata_working_5ftime_2eproto[0]);
}

// ===================================================================

class WorkingTime::_Internal {
 public:
};

WorkingTime::WorkingTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  intervals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:YellowPages.WorkingTime)
}
WorkingTime::WorkingTime(const WorkingTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      intervals_(from.intervals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    formatted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_formatted().empty()) {
    formatted_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_formatted(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:YellowPages.WorkingTime)
}

inline void WorkingTime::SharedCtor() {
formatted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  formatted_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkingTime::~WorkingTime() {
  // @@protoc_insertion_point(destructor:YellowPages.WorkingTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkingTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  formatted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkingTime::ArenaDtor(void* object) {
  WorkingTime* _this = reinterpret_cast< WorkingTime* >(object);
  (void)_this;
}
void WorkingTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkingTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkingTime::Clear() {
// @@protoc_insertion_point(message_clear_start:YellowPages.WorkingTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  formatted_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkingTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string formatted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_formatted();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "YellowPages.WorkingTime.formatted"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .YellowPages.WorkingTimeInterval intervals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_intervals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkingTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:YellowPages.WorkingTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string formatted = 1;
  if (!this->_internal_formatted().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_formatted().data(), static_cast<int>(this->_internal_formatted().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "YellowPages.WorkingTime.formatted");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_formatted(), target);
  }

  // repeated .YellowPages.WorkingTimeInterval intervals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_intervals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_intervals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YellowPages.WorkingTime)
  return target;
}

size_t WorkingTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:YellowPages.WorkingTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .YellowPages.WorkingTimeInterval intervals = 2;
  total_size += 1UL * this->_internal_intervals_size();
  for (const auto& msg : this->intervals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string formatted = 1;
  if (!this->_internal_formatted().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_formatted());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkingTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorkingTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkingTime::GetClassData() const { return &_class_data_; }

void WorkingTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorkingTime *>(to)->MergeFrom(
      static_cast<const WorkingTime &>(from));
}


void WorkingTime::MergeFrom(const WorkingTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:YellowPages.WorkingTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
  if (!from._internal_formatted().empty()) {
    _internal_set_formatted(from._internal_formatted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkingTime::CopyFrom(const WorkingTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:YellowPages.WorkingTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkingTime::IsInitialized() const {
  return true;
}

void WorkingTime::InternalSwap(WorkingTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  intervals_.InternalSwap(&other->intervals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &formatted_, lhs_arena,
      &other->formatted_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkingTime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_working_5ftime_2eproto_getter, &descriptor_table_working_5ftime_2eproto_once,
      file_level_metadata_working_5ftime_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace YellowPages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::YellowPages::WorkingTimeInterval* Arena::CreateMaybeMessage< ::YellowPages::WorkingTimeInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YellowPages::WorkingTimeInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::YellowPages::WorkingTime* Arena::CreateMaybeMessage< ::YellowPages::WorkingTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::YellowPages::WorkingTime >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
