// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "company.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signal_2eproto;
namespace YellowPages {
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
}  // namespace YellowPages
PROTOBUF_NAMESPACE_OPEN
template<> ::YellowPages::Signal* Arena::CreateMaybeMessage<::YellowPages::Signal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace YellowPages {

// ===================================================================

class Signal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YellowPages.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  ~Signal() override;
  explicit constexpr Signal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Signal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YellowPages.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyFieldNumber = 3,
    kProviderIdFieldNumber = 1,
    kUpdateDateFieldNumber = 2,
  };
  // .YellowPages.Company company = 3;
  bool has_company() const;
  private:
  bool _internal_has_company() const;
  public:
  void clear_company();
  const ::YellowPages::Company& company() const;
  PROTOBUF_NODISCARD ::YellowPages::Company* release_company();
  ::YellowPages::Company* mutable_company();
  void set_allocated_company(::YellowPages::Company* company);
  private:
  const ::YellowPages::Company& _internal_company() const;
  ::YellowPages::Company* _internal_mutable_company();
  public:
  void unsafe_arena_set_allocated_company(
      ::YellowPages::Company* company);
  ::YellowPages::Company* unsafe_arena_release_company();

  // uint64 provider_id = 1;
  void clear_provider_id();
  uint64_t provider_id() const;
  void set_provider_id(uint64_t value);
  private:
  uint64_t _internal_provider_id() const;
  void _internal_set_provider_id(uint64_t value);
  public:

  // uint64 update_date = 2;
  void clear_update_date();
  uint64_t update_date() const;
  void set_update_date(uint64_t value);
  private:
  uint64_t _internal_update_date() const;
  void _internal_set_update_date(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:YellowPages.Signal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::YellowPages::Company* company_;
  uint64_t provider_id_;
  uint64_t update_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Signal

// uint64 provider_id = 1;
inline void Signal::clear_provider_id() {
  provider_id_ = uint64_t{0u};
}
inline uint64_t Signal::_internal_provider_id() const {
  return provider_id_;
}
inline uint64_t Signal::provider_id() const {
  // @@protoc_insertion_point(field_get:YellowPages.Signal.provider_id)
  return _internal_provider_id();
}
inline void Signal::_internal_set_provider_id(uint64_t value) {
  
  provider_id_ = value;
}
inline void Signal::set_provider_id(uint64_t value) {
  _internal_set_provider_id(value);
  // @@protoc_insertion_point(field_set:YellowPages.Signal.provider_id)
}

// uint64 update_date = 2;
inline void Signal::clear_update_date() {
  update_date_ = uint64_t{0u};
}
inline uint64_t Signal::_internal_update_date() const {
  return update_date_;
}
inline uint64_t Signal::update_date() const {
  // @@protoc_insertion_point(field_get:YellowPages.Signal.update_date)
  return _internal_update_date();
}
inline void Signal::_internal_set_update_date(uint64_t value) {
  
  update_date_ = value;
}
inline void Signal::set_update_date(uint64_t value) {
  _internal_set_update_date(value);
  // @@protoc_insertion_point(field_set:YellowPages.Signal.update_date)
}

// .YellowPages.Company company = 3;
inline bool Signal::_internal_has_company() const {
  return this != internal_default_instance() && company_ != nullptr;
}
inline bool Signal::has_company() const {
  return _internal_has_company();
}
inline const ::YellowPages::Company& Signal::_internal_company() const {
  const ::YellowPages::Company* p = company_;
  return p != nullptr ? *p : reinterpret_cast<const ::YellowPages::Company&>(
      ::YellowPages::_Company_default_instance_);
}
inline const ::YellowPages::Company& Signal::company() const {
  // @@protoc_insertion_point(field_get:YellowPages.Signal.company)
  return _internal_company();
}
inline void Signal::unsafe_arena_set_allocated_company(
    ::YellowPages::Company* company) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(company_);
  }
  company_ = company;
  if (company) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:YellowPages.Signal.company)
}
inline ::YellowPages::Company* Signal::release_company() {
  
  ::YellowPages::Company* temp = company_;
  company_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::YellowPages::Company* Signal::unsafe_arena_release_company() {
  // @@protoc_insertion_point(field_release:YellowPages.Signal.company)
  
  ::YellowPages::Company* temp = company_;
  company_ = nullptr;
  return temp;
}
inline ::YellowPages::Company* Signal::_internal_mutable_company() {
  
  if (company_ == nullptr) {
    auto* p = CreateMaybeMessage<::YellowPages::Company>(GetArenaForAllocation());
    company_ = p;
  }
  return company_;
}
inline ::YellowPages::Company* Signal::mutable_company() {
  ::YellowPages::Company* _msg = _internal_mutable_company();
  // @@protoc_insertion_point(field_mutable:YellowPages.Signal.company)
  return _msg;
}
inline void Signal::set_allocated_company(::YellowPages::Company* company) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(company_);
  }
  if (company) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(company));
    if (message_arena != submessage_arena) {
      company = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, company, submessage_arena);
    }
    
  } else {
    
  }
  company_ = company;
  // @@protoc_insertion_point(field_set_allocated:YellowPages.Signal.company)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace YellowPages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signal_2eproto
